PREPARING THE ENVIRONMENT:

	Expo framework:

	command to install it globally:
		sudo npm i -g expo-cli

	VS Code extensions:
		react native tools
		react-natice/react/redux snippets
		prettier - code formatter
		Material Icon Theme

	enabling prettier: file -> preferences -> Settings -> search for formatonsave, enable it.

CREATING APP

	expo init AppName

	using the firts option, blank without typescript

STARTING THE SERVER

	npm start

RUNNING ON SIMULATORS

	to run an iPhone simulator we need a xcode (mac)
	to run an android simulator, we need android studio (developer.andoird.com/studio)

	https://docs.expo.io/ -> Add android sdk on the path

crtl + m -> open developer menu on the simulator

RUNNING ON PHYSICAL DEVICE

	read the QR code on the phone with the actual app
	to open the developer menu, shake the phone

DEBUGGING:

	on the developer menu, debug remote Js
	a new tab on chrome is going to open, que we can debug

PUBLISHING:

	expo publish

VIEW Component:

	the view component is like a div in web development.
	to avoid problems with the notch on modern phones like iphone12, we can use SafeAreaView

TEXT Component:

	onPress => sort of onClick on normal react
	numberOfLines => truncate the text to specific number of lines

IMAGE component:

	to add an image from a file (in assets folder):

      <Image source={require("./assets/favicon.png")} />

    to add an image from a url:

      <Image source={{ 
        width: 200,
        height: 300,
        uri: "https://picsum.photos/200/300" 
      }} />

      to make an image touchable, we can wrap it around another component, such as:

      	- TouchableWithoutFeedback
      	- TouchableOpacity
      	- TouchableHighLight
      	- TouchableNativeFeedback (only for Android)

      the difference between them is what happens when the image is pressed

      to handle what happens when touching it, use the onPress={} 


BUTTONS:
	
	example:

		<Button title="Click me" onPress={() => console.log("button tapped")} />

	they are displayed differently on android/ios

ALERT:
	
	example 1:

		<Button title="Click me" onPress={() => alert("button tapped")} />

	example 2:

      <Button title="Click me" 
        onPress={() => 
          Alert.alert("My Title", "My MEssage", [
            {text: "Yes", onPress: () => console.log("Yes")},
            {text: "No", onPress: () => console.log("No")},
          ])
        }
      />

     example 3 (ios only):

      <Button 
        title="Click me"
        onPress={ () =>
          Alert.prompt("My title", "My Message", text => console.log(text))
        }
      /> 

StyleShhet:

	Styles in react native are inspired by css but actually they're only javascript objects.

	So they can be directly passed to a component as an object.

	Ideally, using the StyleSheet component and its creat function, the styles are validated for misspelling, e.g.

	const styles = StyleSheet.create({
	  container: {
	    flex: 1,
	    backgroundColor: '#fff',
	    alignItems: 'center',
	    justifyContent: 'center',
	  },
	});

Platform:

	we can use it to personalise based on which OS the app is running

	is styles for example: 

		paddingTop: Platform.OS === "android" ? 20 : 0
		paddingTop: Platform.OS === "android" ? StatusBar.currentHeight : 0


Dimensions

	We can use % in styles:

		  <View style={{ 
	        backgroundColor: "dodgerblue",
	        width: '100%',
	        height: 70
	      }}>

	We can get the devide dimensions with the Dimensions api

		console.log(Dimensions.get("screen"))
		console.log(Dimensions.get("window"))


React Native Hooks

	npm i @react-native-community/hooks

	this library contain a few hooks

	useDimensions() gets the current dimensions (portrait or landscape)
	useDeviceOrientation returns an object -> {portrait: true, landscape: false}

Flex

	in styles:

		flex: 1

		 - fills the whole available space

		flex: 0.5

		 - fills up half the available space

	if you have children component, each one will fill its respective space.


	flexDirection:

		in react native, the default is column, you can set it to row, row-reverse, column-reverse

	justifyContent:

		align items in the main axis (according to flexDirection, if its row -> horizontal, column -> vertical). 
		it can be set to center, flex-end, flex-start, space-around, space-between, spave-evenly

	alignItems:

		align items in the secondary axis. it is applied to the container
		center, baseline, flex-end, flex-start, stretch

	alignSelf:

		if you wanna change an specific item, using the same properties as alignItems.

	flexWrap:

		if the items inside a container exceeds the width, its going to be truncaded.
		we can set flexWrap: "wrap"
		the alignItems aligns within each line, to align to the center of the parent container, we need to use alignContent

	alignContent:

		align the entire content, if the flexwrap is set to wrap

	flexBasis:
	flexGrow:

	top: 10

		sort of like margin. top, bottom, left, right

	position: 

		by default, the value is relative
		it can be changed to absolute, so the position will be set according to the parent.

FETCH data from API






















